// Script de d√©bogage pour diagnostiquer le probl√®me de chargement des formations
console.log('üîç Script de d√©bogage des formations MongoDB Atlas');

// V√©rifier si le conteneur existe
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM charg√©, d√©but du d√©bogage...');
    
    const formationsGrid = document.getElementById('formations-grid');
    console.log('üéØ Conteneur formations-grid trouv√©:', formationsGrid);
    
    if (formationsGrid) {
        console.log('üìã Contenu actuel du conteneur:', formationsGrid.innerHTML);
    }
    
    // V√©rifier les scripts charg√©s
    console.log('üìú Scripts charg√©s:');
    const scripts = document.querySelectorAll('script[src]');
    scripts.forEach((script, index) => {
        console.log(`${index + 1}. ${script.src}`);
    });
    
    // Tester l'API directement
    console.log('üåê Test de l\'API MongoDB...');
    fetch('http://localhost:5000/api/formations')
        .then(response => {
            console.log('üì° R√©ponse API:', response.status, response.statusText);
            return response.json();
        })
        .then(data => {
            console.log('üìä Donn√©es API:', data);
            console.log('üìà Nombre de formations:', data.data ? data.data.length : 'N/A');
        })
        .catch(error => {
            console.error('‚ùå Erreur API:', error);
        });
    
    // V√©rifier les variables globales
    console.log('üåç Variables globales:');
    console.log('window.formationsMongoDBLoader:', window.formationsMongoDBLoader);
    console.log('window.formationsIntegration:', window.formationsIntegration);
    
    // Attendre un peu puis v√©rifier √† nouveau
    setTimeout(() => {
        console.log('‚è∞ V√©rification apr√®s 3 secondes...');
        if (formationsGrid) {
            console.log('üìã Contenu du conteneur apr√®s 3s:', formationsGrid.innerHTML);
        }
        
        // V√©rifier si des formations ont √©t√© ajout√©es
        const formationCards = document.querySelectorAll('.formation-card');
        console.log('üé¥ Cartes de formations trouv√©es:', formationCards.length);
        
        formationCards.forEach((card, index) => {
            console.log(`Carte ${index + 1}:`, card.textContent.substring(0, 100) + '...');
        });
    }, 3000);
});

// Fonction pour forcer le chargement des formations
window.forceLoadFormations = function() {
    console.log('üöÄ For√ßage du chargement des formations...');
    
    if (window.formationsMongoDBLoader) {
        console.log('‚úÖ Chargeur MongoDB trouv√©, r√©initialisation...');
        window.formationsMongoDBLoader.init();
    } else {
        console.log('‚ùå Chargeur MongoDB non trouv√©');
    }
};

// Fonction pour nettoyer le conteneur
window.clearFormationsContainer = function() {
    console.log('üßπ Nettoyage du conteneur...');
    const formationsGrid = document.getElementById('formations-grid');
    if (formationsGrid) {
        formationsGrid.innerHTML = '<div class="debug-info">Conteneur nettoy√©</div>';
    }
};

console.log('üîß Fonctions de d√©bogage disponibles:');
console.log('- forceLoadFormations() : Forcer le chargement');
console.log('- clearFormationsContainer() : Nettoyer le conteneur'); 