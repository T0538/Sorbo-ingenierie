// Script d'initialisation de l'administrateur par d√©faut
// Usage: node backend/init-admin.js

const mongoose = require('mongoose');
const AdminUser = require('./models/AdminUser');
require('dotenv').config();

// Configuration de connexion MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/sorbo-ingenierie';

async function initializeAdmin() {
    try {
        console.log('üöÄ Initialisation du syst√®me d\'administration Sorbo-Ing√©nierie...\n');
        
        // Connexion √† MongoDB
        console.log('üì° Connexion √† MongoDB...');
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('‚úÖ Connexion MongoDB r√©ussie\n');
        
        // Cr√©er l'administrateur par d√©faut
        console.log('üë§ Cr√©ation de l\'administrateur par d√©faut...');
        const admin = await AdminUser.createDefaultAdmin();
        
        if (admin) {
            console.log('\nüéâ Initialisation termin√©e avec succ√®s !');
            console.log('\nüìã Informations de connexion :');
            console.log('   üåê URL de connexion: http://localhost:3000/admin-login.html');
            console.log('   üë§ Nom d\'utilisateur:', admin.username);
            console.log('   üîë Mot de passe:', 'AdminSorbo2024!');
            console.log('   üè∑Ô∏è  R√¥le:', admin.role);
            console.log('\n‚ö†Ô∏è  IMPORTANT: Changez ce mot de passe apr√®s la premi√®re connexion !');
            console.log('\nüîí S√©curit√© activ√©e :');
            console.log('   ‚Ä¢ Verrouillage automatique apr√®s 5 tentatives √©chou√©es');
            console.log('   ‚Ä¢ Session JWT valide 24 heures');
            console.log('   ‚Ä¢ Hachage bcrypt avec 12 rounds');
            console.log('   ‚Ä¢ Logs d\'activit√© complets');
        }
        
    } catch (error) {
        console.error('\n‚ùå Erreur lors de l\'initialisation:', error.message);
        
        if (error.code === 11000) {
            console.log('\nüí° Solution: L\'administrateur existe d√©j√†. Utilisez les identifiants existants.');
        } else if (error.name === 'MongoNetworkError') {
            console.log('\nüí° Solution: V√©rifiez que MongoDB est d√©marr√© et accessible.');
            console.log('   URI actuelle:', MONGODB_URI);
        }
        
        process.exit(1);
    } finally {
        // Fermer la connexion
        await mongoose.connection.close();
        console.log('\nüîå Connexion MongoDB ferm√©e');
        process.exit(0);
    }
}

// Fonction pour v√©rifier l'√©tat de la base de donn√©es
async function checkDatabaseStatus() {
    try {
        console.log('üîç V√©rification de l\'√©tat de la base de donn√©es...\n');
        
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        // Compter les utilisateurs
        const userCount = await AdminUser.countDocuments();
        console.log(`üë• Nombre d'utilisateurs administrateurs: ${userCount}`);
        
        if (userCount > 0) {
            const users = await AdminUser.find({}).select('username role isActive createdAt');
            console.log('\nüìã Liste des utilisateurs :');
            users.forEach((user, index) => {
                const status = user.isActive ? 'üü¢ Actif' : 'üî¥ Inactif';
                console.log(`   ${index + 1}. ${user.username} (${user.role}) - ${status} - Cr√©√© le ${user.createdAt.toLocaleDateString('fr-FR')}`);
            });
        }
        
        // V√©rifier les collections
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log('\nüóÑÔ∏è  Collections disponibles :');
        collections.forEach(collection => {
            console.log(`   ‚Ä¢ ${collection.name}`);
        });
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
    } finally {
        await mongoose.connection.close();
        process.exit(0);
    }
}

// Gestion des arguments de ligne de commande
const args = process.argv.slice(2);

if (args.includes('--check') || args.includes('-c')) {
    checkDatabaseStatus();
} else if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üîê Script d'initialisation de l'administration Sorbo-Ing√©nierie

Usage:
  node backend/init-admin.js          # Initialise l'administrateur par d√©faut
  node backend/init-admin.js --check  # V√©rifie l'√©tat de la base de donn√©es
  node backend/init-admin.js --help   # Affiche cette aide

Options:
  --check, -c    V√©rifie l'√©tat de la base de donn√©es
  --help, -h     Affiche cette aide

Variables d'environnement:
  MONGODB_URI   URI de connexion MongoDB (d√©faut: mongodb://localhost:27017/sorbo-ingenierie)

Exemples:
  node backend/init-admin.js
  MONGODB_URI=mongodb+srv://user:pass@cluster.mongodb.net/db node backend/init-admin.js
    `);
    process.exit(0);
} else {
    initializeAdmin();
}


