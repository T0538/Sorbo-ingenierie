// Script pour corriger directement les formations dans MongoDB
const mongoose = require('mongoose');
const Formation = require('./models/Formation');
require('dotenv').config();

console.log('üîß === CORRECTION DIRECTE DES FORMATIONS ===\n');

// Configuration MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/sorbo-ingenierie';

// Nouvelles donn√©es de formations compl√®tes
const formationsCorrigees = [
    {
        titre: "Dimensionnement des structures de chauss√©es routi√®res",
        description: "Formation compl√®te sur la conception et le calcul des structures de chauss√©es neuves selon les normes internationales. Ma√Ætrisez les m√©thodes modernes de dimensionnement et les outils de calcul.",
        prix: 150000,
        duree: "2 jours (16h)",
        niveau: "Interm√©diaire",
        categorie: "G√©nie civil",
        localisation: "Abidjan, Cocody",
        dates: "Du 15 au 20 janvier 2025",
        image: "images/formationi2.JPG",
        objectifs: [
            "Ma√Ætriser les m√©thodes de dimensionnement",
            "Analyser les sols et mat√©riaux",
            "Concevoir des structures durables",
            "Utiliser les outils de calcul"
        ],
        prerequisites: [
            "Notions de g√©nie civil",
            "Bases en m√©canique des sols"
        ],
        status: "active",
        modalite: "En pr√©sentiel",
        maxParticipants: 15,
        tags: ["G√©nie civil", "Routier", "Dimensionnement"]
    },
    {
        titre: "Diagnostic et renforcement des chauss√©es routi√®res",
        description: "M√©thodes CEREMA-IDRRIM pour l'√©valuation et le renforcement des structures existantes. Apprenez √† diagnostiquer l'√©tat des chauss√©es et concevoir des solutions de renforcement.",
        prix: 200000,
        duree: "3 jours (24h)",
        niveau: "Avanc√©",
        categorie: "G√©nie civil",
        localisation: "Abidjan, Plateau",
        dates: "Du 5 au 12 f√©vrier 2025",
        image: "images/formationi3.JPG",
        objectifs: [
            "Diagnostiquer l'√©tat des chauss√©es",
            "Analyser les d√©gradations",
            "Concevoir des renforcements",
            "Optimiser la maintenance"
        ],
        prerequisites: [
            "Exp√©rience en g√©nie civil",
            "Connaissance des mat√©riaux routiers"
        ],
        status: "active",
        modalite: "En pr√©sentiel",
        maxParticipants: 12,
        tags: ["G√©nie civil", "Diagnostic", "Renforcement"]
    },
    {
        titre: "Dimensionnement des chauss√©es sous charges sp√©ciales",
        description: "Conception pour v√©hicules lourds et charges exceptionnelles selon les normes en vigueur. Formation sp√©cialis√©e pour les infrastructures √† usage intensif.",
        prix: 130000,
        duree: "2 jours (16h)",
        niveau: "Avanc√©",
        categorie: "G√©nie civil",
        localisation: "Abidjan, Zone 4",
        dates: "Du 18 au 22 mars 2025",
        image: "images/formationi4.JPG",
        objectifs: [
            "Comprendre les charges sp√©ciales",
            "Dimensionner pour v√©hicules lourds",
            "Analyser les contraintes",
            "Optimiser les structures"
        ],
        prerequisites: [
            "Formation en dimensionnement classique",
            "Exp√©rience pratique"
        ],
        status: "active",
        modalite: "En pr√©sentiel",
        maxParticipants: 10,
        tags: ["G√©nie civil", "Charges sp√©ciales", "V√©hicules lourds"]
    },
    {
        titre: "Topographie appliqu√©e et relev√©s de terrain",
        description: "Formation pratique sur les techniques modernes de topographie et les relev√©s de terrain. Utilisation d'√©quipements de pointe et logiciels sp√©cialis√©s.",
        prix: 175000,
        duree: "3 jours (24h)",
        niveau: "Interm√©diaire",
        categorie: "Topographie",
        localisation: "Abidjan, Cocody",
        dates: "Du 8 au 12 avril 2025",
        image: "images/formationi5.JPG",
        objectifs: [
            "Ma√Ætriser les instruments de mesure",
            "R√©aliser des relev√©s pr√©cis",
            "Traiter les donn√©es topographiques",
            "Produire des plans techniques"
        ],
        prerequisites: [
            "Notions de g√©om√©trie",
            "Bases informatiques"
        ],
        status: "active",
        modalite: "En pr√©sentiel",
        maxParticipants: 15,
        tags: ["Topographie", "Relev√©s", "Terrain"]
    }
];

async function corrigerFormationsDirectement() {
    try {
        console.log('üì° Connexion √† MongoDB...');
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('‚úÖ Connexion MongoDB r√©ussie\n');

        // 1. V√©rifier les formations existantes
        console.log('üîç V√©rification des formations existantes...');
        const formationsExistantes = await Formation.find();
        console.log(`üìä ${formationsExistantes.length} formations trouv√©es\n`);

        // Afficher les donn√©es existantes
        console.log('üìã Formations actuelles:');
        formationsExistantes.forEach((formation, index) => {
            console.log(`   ${index + 1}. ID: ${formation._id}`);
            console.log(`      Titre: ${formation.titre || 'MANQUANT'}`);
            console.log(`      Cat√©gorie: ${formation.categorie || 'MANQUANT'}`);
            console.log(`      Prix: ${formation.prix || 'MANQUANT'}`);
            console.log('');
        });

        // 2. Supprimer toutes les formations existantes
        console.log('üóëÔ∏è Suppression des formations existantes...');
        const deleteResult = await Formation.deleteMany({});
        console.log(`‚úÖ ${deleteResult.deletedCount} formations supprim√©es\n`);

        // 3. Cr√©er les nouvelles formations
        console.log('‚ûï Cr√©ation des nouvelles formations...');
        const nouvelles = [];

        for (let i = 0; i < formationsCorrigees.length; i++) {
            const formationData = formationsCorrigees[i];
            console.log(`   üìù Cr√©ation: ${formationData.titre}`);
            
            const formation = new Formation(formationData);
            const saved = await formation.save();
            nouvelles.push(saved);
            
            console.log(`   ‚úÖ Cr√©√©e avec ID: ${saved._id}`);
        }

        console.log(`\nüéâ ${nouvelles.length} nouvelles formations cr√©√©es !\n`);

        // 4. V√©rification finale
        console.log('üîç V√©rification finale...');
        const formationsFinales = await Formation.find();
        
        console.log(`üìä === R√âSUM√â FINAL ===`);
        console.log(`‚úÖ Formations total: ${formationsFinales.length}`);
        console.log(`\nüìã Liste finale:`);
        
        formationsFinales.forEach((formation, index) => {
            console.log(`   ${index + 1}. ${formation.titre}`);
            console.log(`      üìÇ Cat√©gorie: ${formation.categorie}`);
            console.log(`      üí∞ Prix: ${formation.prix} FCFA`);
            console.log(`      üìÖ Dur√©e: ${formation.duree}`);
            console.log(`      üìç Lieu: ${formation.localisation}`);
            console.log(`      üéØ Statut: ${formation.status}`);
            console.log('');
        });

        // V√©rifier la compl√©tude
        const formationsCompletes = formationsFinales.filter(f => 
            f.titre && f.categorie && f.prix && f.status
        );

        console.log(`‚úÖ Formations compl√®tes: ${formationsCompletes.length}/${formationsFinales.length}`);

        if (formationsCompletes.length === formationsFinales.length) {
            console.log(`\nüéâ SUCC√àS TOTAL !`);
            console.log(`üåê Toutes les formations sont maintenant compl√®tes`);
            console.log(`üöÄ Votre domaine .ci devrait afficher les vraies formations`);
            console.log(`üì± Testez sur: https://sorbo-ingenierie.ci/nos-formations.html`);
        } else {
            console.log(`\n‚ö†Ô∏è Certaines formations sont encore incompl√®tes`);
        }

    } catch (error) {
        console.error(`üí• Erreur: ${error.message}`);
        throw error;
    } finally {
        // Fermer la connexion
        await mongoose.connection.close();
        console.log(`\nüì° Connexion MongoDB ferm√©e`);
    }
}

// Ex√©cution
corrigerFormationsDirectement()
    .then(() => {
        console.log(`\n‚úÖ Script termin√© avec succ√®s`);
        process.exit(0);
    })
    .catch(error => {
        console.error(`\nüí• Script √©chou√©: ${error.message}`);
        process.exit(1);
    });
