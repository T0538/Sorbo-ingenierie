// Script pour corriger les donn√©es des formations dans MongoDB Atlas
console.log('üîß === CORRECTION DES DONN√âES FORMATIONS ===\n');

// Configuration
const API_BASE_URL = 'https://sorbo-api-production.up.railway.app';

// Nouvelles donn√©es de formations compl√®tes
const formationsCorrigees = [
    {
        titre: "Dimensionnement des structures de chauss√©es routi√®res",
        description: "Formation compl√®te sur la conception et le calcul des structures de chauss√©es neuves selon les normes internationales. Ma√Ætrisez les m√©thodes modernes de dimensionnement et les outils de calcul.",
        prix: 150000,
        duree: "2 jours (16h)",
        niveau: "Interm√©diaire",
        categorie: "G√©nie civil",
        localisation: "Abidjan, Cocody",
        dates: "Du 15 au 20 janvier 2025",
        image: "images/formationi2.JPG",
        objectifs: [
            "Ma√Ætriser les m√©thodes de dimensionnement",
            "Analyser les sols et mat√©riaux",
            "Concevoir des structures durables",
            "Utiliser les outils de calcul"
        ],
        prerequisites: [
            "Notions de g√©nie civil",
            "Bases en m√©canique des sols"
        ],
        status: "active",
        modalite: "En pr√©sentiel",
        maxParticipants: 15,
        tags: ["G√©nie civil", "Routier", "Dimensionnement"]
    },
    {
        titre: "Diagnostic et renforcement des chauss√©es routi√®res",
        description: "M√©thodes CEREMA-IDRRIM pour l'√©valuation et le renforcement des structures existantes. Apprenez √† diagnostiquer l'√©tat des chauss√©es et concevoir des solutions de renforcement.",
        prix: 200000,
        duree: "3 jours (24h)",
        niveau: "Avanc√©",
        categorie: "G√©nie civil",
        localisation: "Abidjan, Plateau",
        dates: "Du 5 au 12 f√©vrier 2025",
        image: "images/formationi3.JPG",
        objectifs: [
            "Diagnostiquer l'√©tat des chauss√©es",
            "Analyser les d√©gradations",
            "Concevoir des renforcements",
            "Optimiser la maintenance"
        ],
        prerequisites: [
            "Exp√©rience en g√©nie civil",
            "Connaissance des mat√©riaux routiers"
        ],
        status: "active",
        modalite: "En pr√©sentiel",
        maxParticipants: 12,
        tags: ["G√©nie civil", "Diagnostic", "Renforcement"]
    },
    {
        titre: "Dimensionnement des chauss√©es sous charges sp√©ciales",
        description: "Conception pour v√©hicules lourds et charges exceptionnelles selon les normes en vigueur. Formation sp√©cialis√©e pour les infrastructures √† usage intensif.",
        prix: 130000,
        duree: "2 jours (16h)",
        niveau: "Avanc√©",
        categorie: "G√©nie civil",
        localisation: "Abidjan, Zone 4",
        dates: "Du 18 au 22 mars 2025",
        image: "images/formationi4.JPG",
        objectifs: [
            "Comprendre les charges sp√©ciales",
            "Dimensionner pour v√©hicules lourds",
            "Analyser les contraintes",
            "Optimiser les structures"
        ],
        prerequisites: [
            "Formation en dimensionnement classique",
            "Exp√©rience pratique"
        ],
        status: "active",
        modalite: "En pr√©sentiel",
        maxParticipants: 10,
        tags: ["G√©nie civil", "Charges sp√©ciales", "V√©hicules lourds"]
    },
    {
        titre: "Topographie appliqu√©e et relev√©s de terrain",
        description: "Formation pratique sur les techniques modernes de topographie et les relev√©s de terrain. Utilisation d'√©quipements de pointe et logiciels sp√©cialis√©s.",
        prix: 175000,
        duree: "3 jours (24h)",
        niveau: "Interm√©diaire",
        categorie: "Topographie",
        localisation: "Abidjan, Cocody",
        dates: "Du 8 au 12 avril 2025",
        image: "images/formationi5.JPG",
        objectifs: [
            "Ma√Ætriser les instruments de mesure",
            "R√©aliser des relev√©s pr√©cis",
            "Traiter les donn√©es topographiques",
            "Produire des plans techniques"
        ],
        prerequisites: [
            "Notions de g√©om√©trie",
            "Bases informatiques"
        ],
        status: "active",
        modalite: "En pr√©sentiel",
        maxParticipants: 15,
        tags: ["Topographie", "Relev√©s", "Terrain"]
    }
];

// Fonction pour mettre √† jour une formation
async function updateFormation(formationId, nouvellesDonnees) {
    try {
        console.log(`üîÑ Mise √† jour de la formation ${formationId}...`);
        
        const response = await fetch(`${API_BASE_URL}/api/formations/${formationId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(nouvellesDonnees)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log(`‚úÖ Formation ${formationId} mise √† jour`);
            return result;
        } else {
            console.log(`‚ùå Erreur ${response.status}: ${response.statusText}`);
            return null;
        }
        
    } catch (error) {
        console.log(`‚ùå Erreur lors de la mise √† jour: ${error.message}`);
        return null;
    }
}

// Fonction pour r√©cup√©rer les formations existantes
async function getFormations() {
    try {
        console.log('üì° R√©cup√©ration des formations existantes...');
        
        const response = await fetch(`${API_BASE_URL}/api/formations`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log(`‚úÖ ${result.data.length} formations r√©cup√©r√©es`);
            return result.data;
        } else {
            console.log(`‚ùå Erreur ${response.status}: ${response.statusText}`);
            return [];
        }
        
    } catch (error) {
        console.log(`‚ùå Erreur lors de la r√©cup√©ration: ${error.message}`);
        return [];
    }
}

// Fonction pour cr√©er une nouvelle formation
async function createFormation(donneesFormation) {
    try {
        console.log(`‚ûï Cr√©ation d'une nouvelle formation: ${donneesFormation.titre}`);
        
        const response = await fetch(`${API_BASE_URL}/api/formations`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(donneesFormation)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log(`‚úÖ Formation cr√©√©e: ${result._id}`);
            return result;
        } else {
            const errorText = await response.text();
            console.log(`‚ùå Erreur ${response.status}: ${errorText}`);
            return null;
        }
        
    } catch (error) {
        console.log(`‚ùå Erreur lors de la cr√©ation: ${error.message}`);
        return null;
    }
}

// Fonction principale de correction
async function corrigerFormations() {
    console.log('üöÄ D√©but de la correction des formations...\n');
    
    // 1. R√©cup√©rer les formations existantes
    const formationsExistantes = await getFormations();
    
    if (formationsExistantes.length === 0) {
        console.log('üìù Aucune formation existante, cr√©ation de nouvelles formations...');
        
        // Cr√©er toutes les formations
        for (let i = 0; i < formationsCorrigees.length; i++) {
            const formation = formationsCorrigees[i];
            await createFormation(formation);
            
            // Attendre un peu entre les cr√©ations
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
    } else {
        console.log(`üìù ${formationsExistantes.length} formations existantes trouv√©es, mise √† jour...`);
        
        // Mettre √† jour les formations existantes
        for (let i = 0; i < Math.min(formationsExistantes.length, formationsCorrigees.length); i++) {
            const formationExistante = formationsExistantes[i];
            const nouvellesDonnees = formationsCorrigees[i];
            
            await updateFormation(formationExistante._id, nouvellesDonnees);
            
            // Attendre un peu entre les mises √† jour
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        // Si on a plus de nouvelles formations que d'existantes, cr√©er les manquantes
        if (formationsCorrigees.length > formationsExistantes.length) {
            console.log('‚ûï Cr√©ation des formations suppl√©mentaires...');
            
            for (let i = formationsExistantes.length; i < formationsCorrigees.length; i++) {
                const formation = formationsCorrigees[i];
                await createFormation(formation);
                
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
    }
    
    // 2. V√©rifier le r√©sultat
    console.log('\nüîç V√©rification du r√©sultat...');
    const formationsFinales = await getFormations();
    
    console.log(`\nüìä === R√âSUM√â ===`);
    console.log(`‚úÖ Formations finales: ${formationsFinales.length}`);
    
    if (formationsFinales.length > 0) {
        console.log(`\nüìã Liste des formations:`);
        formationsFinales.forEach((formation, index) => {
            console.log(`   ${index + 1}. ${formation.titre || 'Titre manquant'}`);
            console.log(`      Cat√©gorie: ${formation.categorie || 'Non d√©finie'}`);
            console.log(`      Prix: ${formation.prix || 'Non d√©fini'} FCFA`);
            console.log(`      Statut: ${formation.status || 'Non d√©fini'}`);
            console.log('');
        });
        
        // V√©rifier si les donn√©es sont compl√®tes
        const formationsCompletes = formationsFinales.filter(f => 
            f.titre && f.categorie && f.prix && f.status
        );
        
        console.log(`‚úÖ Formations compl√®tes: ${formationsCompletes.length}/${formationsFinales.length}`);
        
        if (formationsCompletes.length === formationsFinales.length) {
            console.log(`üéâ Toutes les formations ont des donn√©es compl√®tes !`);
            console.log(`üåê Votre domaine .ci devrait maintenant afficher les vraies formations`);
        } else {
            console.log(`‚ö†Ô∏è Certaines formations ont encore des donn√©es incompl√®tes`);
        }
        
    } else {
        console.log(`‚ùå Aucune formation trouv√©e apr√®s correction`);
    }
}

// Ex√©cuter la correction
corrigerFormations().catch(error => {
    console.error(`üí• Erreur fatale: ${error.message}`);
    process.exit(1);
});
