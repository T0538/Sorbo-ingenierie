// Test de la version de l'API Railway et diagnostic MongoDB
console.log('üîç Diagnostic complet de l\'API Railway...');

const API_BASE_URL = 'https://sorbo-api-production.up.railway.app';

async function testRailwayVersion() {
    try {
        console.log('üì° Test de la version de l\'API Railway...');
        
        // Test 1: Endpoint de sant√©
        console.log('\n1Ô∏è‚É£ Test de l\'endpoint de sant√©...');
        const healthResponse = await fetch(`${API_BASE_URL}/api/health`);
        console.log(`   Status: ${healthResponse.status}`);
        
        if (healthResponse.ok) {
            const healthData = await healthResponse.json();
            console.log('   ‚úÖ Donn√©es de sant√©:', healthData);
            
            // V√©rifier si MongoDB est mentionn√©
            if (healthData.mongodb) {
                console.log(`   üóÑÔ∏è MongoDB: ${healthData.mongodb}`);
            } else {
                console.log('   ‚ö†Ô∏è MongoDB non mentionn√© dans la r√©ponse');
            }
        }
        
        // Test 2: Endpoint racine
        console.log('\n2Ô∏è‚É£ Test de l\'endpoint racine...');
        try {
            const rootResponse = await fetch(API_BASE_URL);
            console.log(`   Status: ${rootResponse.status}`);
            
            if (rootResponse.ok) {
                const rootData = await rootResponse.json();
                console.log('   ‚úÖ Donn√©es racine:', rootData);
            }
        } catch (error) {
            console.log(`   ‚ùå Erreur endpoint racine: ${error.message}`);
        }
        
        // Test 3: Endpoint des actualit√©s
        console.log('\n3Ô∏è‚É£ Test de l\'endpoint des actualit√©s...');
        try {
            const actualitesResponse = await fetch(`${API_BASE_URL}/api/actualites`);
            console.log(`   Status: ${actualitesResponse.status}`);
            
            if (actualitesResponse.ok) {
                const actualitesData = await actualitesResponse.json();
                console.log('   ‚úÖ Actualit√©s trouv√©es:', actualitesData.count || 0);
                
                if (actualitesData.data && actualitesData.data.length > 0) {
                    console.log('   üì∞ Premi√®re actualit√©:', actualitesData.data[0].titre);
                }
            } else {
                console.log(`   ‚ùå Erreur HTTP: ${actualitesResponse.status}`);
                
                // Essayer de lire le message d'erreur
                try {
                    const errorData = await actualitesResponse.text();
                    console.log('   üìã Message d\'erreur:', errorData.substring(0, 200));
                } catch (e) {
                    console.log('   üìã Impossible de lire le message d\'erreur');
                }
            }
        } catch (error) {
            console.log(`   ‚ùå Erreur endpoint actualit√©s: ${error.message}`);
        }
        
        // Test 4: Endpoint des formations
        console.log('\n4Ô∏è‚É£ Test de l\'endpoint des formations...');
        try {
            const formationsResponse = await fetch(`${API_BASE_URL}/api/formations`);
            console.log(`   Status: ${formationsResponse.status}`);
            
            if (formationsResponse.ok) {
                const formationsData = await formationsResponse.json();
                console.log('   ‚úÖ Formations trouv√©es:', formationsData.count || 0);
            }
        } catch (error) {
            console.log(`   ‚ùå Erreur endpoint formations: ${error.message}`);
        }
        
        // Test 5: Endpoint des logiciels
        console.log('\n5Ô∏è‚É£ Test de l\'endpoint des logiciels...');
        try {
            const logicielsResponse = await fetch(`${API_BASE_URL}/api/logiciels`);
            console.log(`   Status: ${logicielsResponse.status}`);
            
            if (logicielsResponse.ok) {
                const logicielsData = await logicielsResponse.json();
                console.log('   ‚úÖ Logiciels trouv√©s:', logicielsData.count || 0);
            }
        } catch (error) {
            console.log(`   ‚ùå Erreur endpoint logiciels: ${error.message}`);
        }
        
        console.log('\nüìã R√©sum√© du diagnostic:');
        console.log('   - Endpoint de sant√©: Test√©');
        console.log('   - Endpoint racine: Test√©');
        console.log('   - Endpoint actualit√©s: Test√©');
        console.log('   - Endpoint formations: Test√©');
        console.log('   - Endpoint logiciels: Test√©');
        
        console.log('\nüí° Prochaines √©tapes:');
        console.log('   1. V√©rifier les logs Railway pour les erreurs MongoDB');
        console.log('   2. V√©rifier que le serveur utilise le bon code');
        console.log('   3. Forcer un red√©ploiement si n√©cessaire');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error);
    }
}

// Ex√©cuter le diagnostic
testRailwayVersion();
